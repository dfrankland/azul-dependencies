{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"C",
				"Combinator        EnumVariant (tokenizer.rs) : Combinator(Combinator),       "
			],
			[
				"B",
				"BlockEnd          EnumVariant (tokenizer.rs) : BlockEnd,                     "
			],
			[
				"ge",
				"gen_error_pos           Function (stream.rs) : pub fn gen_error_pos(&self) -> ErrorPos                                "
			],
			[
				"a",
				"assert\tassert!(…)"
			],
			[
				"Com",
				"Combinator    EnumVariant (tokenizer.rs) : Combinator(Combinator),"
			],
			[
				"cons",
				"consume_rule    Function (tokenizer.rs) : fn consume_rule(&mut self) -> Result<&'a str, Error>    "
			],
			[
				"s",
				"consume_comment Function (tokenizer.rs) : fn consume_comment(&mut self) -> Result<(), Error>      "
			],
			[
				"Bloc",
				"BlockStart EnumVariant (tokenizer.rs) : BlockStart,"
			],
			[
				"Erro",
				"ErrorPos          Struct (error.rs) : pub struct ErrorPos                                  "
			],
			[
				"Blo",
				"OpenBlock"
			],
			[
				"len",
				"len_to"
			],
			[
				"curr",
				"curr_char_raw    Function (stream.rs) : pub fn curr_char_raw(&self) -> u8                         "
			],
			[
				"con",
				"consume_ident Function (tokenizer.rs) : fn consume_ident(&mut self) -> Result<&'a str, Error>"
			],
			[
				"par",
				"parse_at_keyword Function (tokenizer.rs) : fn parse_at_keyword(&mut self) -> Result<Token<'a>, Error>"
			],
			[
				"as",
				"as_bytes"
			],
			[
				"E",
				"EmptyLang   EnumVariant (error.rs) : EmptyLang(ErrorPos),"
			],
			[
				"read",
				"read_raw_str            Function (stream.rs) : pub fn read_raw_str(&mut self, len: usize) -> &'a str                  "
			],
			[
				"isc",
				"is_char_eq              Function (stream.rs) : pub fn is_char_eq(&self, c: u8) -> Result<bool, Error>                 "
			],
			[
				"is_spa",
				"is_space_raw   Function (stream.rs) : pub fn is_space_raw(&self) -> bool                    "
			],
			[
				"is_ch",
				"is_char_eq_raw Function (stream.rs) : pub fn is_char_eq_raw(&self, c: u8) -> bool           "
			],
			[
				"cur",
				"curr_char_raw           Function (stream.rs) : pub fn curr_char_raw(&self) -> u8                                      "
			],
			[
				"Open",
				"OpenCurly  EnumVariant (tokenizer.rs) : OpenCurly, "
			],
			[
				"sele",
				"selectors Let (tokenizer.rs) : let mut selectors = Vec::new()\\                              "
			],
			[
				"while",
				"while\twhile … { … }"
			],
			[
				"adva",
				"advance_raw             Function (stream.rs) : pub fn advance_raw(&mut self, n: usize)                             "
			],
			[
				"jump",
				"jump_to                 Function (stream.rs) : pub fn jump_to(&mut self, c: u8) -> Result<(), Error>               "
			],
			[
				"stre",
				"stream  Module (stream.rs) : /media/data/Programming/Projects/rust/simplecss/src/stream.rs"
			],
			[
				"sty",
				"styles2"
			],
			[
				"fuz",
				"fuzzy_eq"
			],
			[
				"macro",
				"macro_rules\tmacro_rules! … { … }"
			],
			[
				"prev",
				"previous"
			],
			[
				"impl",
				"implicit"
			],
			[
				"imp",
				"implicit"
			],
			[
				"up",
				"use_implicit_lineto_commands StructField (write_options.rs) : bool"
			],
			[
				"use",
				"use_implicit_lineto_commands"
			],
			[
				"wr",
				"write_dom"
			],
			[
				"Att",
				"Attribute          Struct (attribute.rs) : pub struct Attribute                                     "
			],
			[
				"ext",
				"extern-crate\textern crate …;"
			],
			[
				"set",
				"set_attribute"
			],
			[
				"tran",
				"transforms"
			],
			[
				"get_",
				"get_scale"
			],
			[
				"new",
				"new_x"
			],
			[
				"get",
				"get_skew              Function (transform.rs) : pub fn get_skew(&self) -> (f64, f64)                          "
			],
			[
				"chid",
				"children_all"
			],
			[
				"child",
				"children"
			],
			[
				"refe",
				"reference"
			],
			[
				"first",
				"first_element_child Function (dom.rs) : pub fn first_element_child(&self) -> Option<Node>"
			],
			[
				"Nodet",
				"NodeType          Enum (dom.rs) : pub enum NodeType {                    "
			],
			[
				"supp",
				"support"
			],
			[
				"write",
				"write_buf_opt Function (attribute.rs) : fn write_buf_opt(&self, opt: &WriteOptions, buf: &mut Vec<u8>)"
			],
			[
				"Seg",
				"SegmentData Enum (path.rs) : pub enum SegmentData {"
			],
			[
				"is",
				"is_absolute Function (path.rs) : pub fn is_absolute(&self) -> bool             "
			],
			[
				"abs",
				"absolute"
			],
			[
				"i",
				"is_absolute Function (path.rs) : pub fn is_absolute(c: u8) -> bool"
			],
			[
				"S",
				"SmoothQuadratic EnumVariant (path.rs) : SmoothQuadratic,"
			],
			[
				"data",
				"data_mut"
			],
			[
				"to",
				"to_absolute"
			],
			[
				"pa",
				"path                    Module (path.rs) : /media/data/Programming/Projects/rust/svgdom/../svgparser/src/path.rs           "
			],
			[
				"print",
				"println\tprintln!(…)"
			],
			[
				"refr",
				"referenced"
			],
			[
				"L",
				"Link        EnumVariant (attribute.rs) : Link(Node),            "
			],
			[
				"Attr",
				"AttributeValue Enum (attribute.rs) : pub enum AttributeValue {                "
			],
			[
				"lo",
				"linked_nodes             Function (dom.rs) : pub fn linked_nodes(&self) -> LinkAttributes                                      "
			],
			[
				"rem",
				"remove_attribute         Function (dom.rs) : pub fn remove_attribute(&self, id: AttributeId)                                   "
			],
			[
				"borro",
				"borrow_mut"
			],
			[
				"remove",
				"remove_attribute"
			],
			[
				"Cir",
				"circle"
			],
			[
				"f",
				"Filter                     EnumVariant (attribute.rs) : Filter,                    "
			],
			[
				"att",
				"attr_id"
			],
			[
				"Fall",
				"PaintFallback"
			],
			[
				"u",
				"UnsupportedPaintFallback EnumVariant (error.rs) : UnsupportedPaintFallback(String), // FuncIRI name"
			],
			[
				"Err",
				"Error               Enum (error.rs) : pub enum Error {                                     "
			],
			[
				"suppo",
				"supported"
			],
			[
				"Us",
				"Unsupported"
			],
			[
				"Value",
				"PredefValue"
			],
			[
				"is_e",
				"is_element"
			],
			[
				"is_",
				"is_some           Function (option.rs) : pub fn is_some(&self) -> bool                                       "
			],
			[
				"des",
				"descendants_all          Function (dom.rs) : pub fn descendants_all(&self) -> DescendantsAll                                   "
			],
			[
				"recur",
				"recursive"
			],
			[
				"next",
				"next_sibling"
			],
			[
				"previ",
				"previous_sibling"
			],
			[
				"contai",
				"container"
			],
			[
				"leng",
				"LengthUnit"
			],
			[
				"firs",
				"first_child"
			],
			[
				"Vec",
				"VecMap     Struct (lib.rs) : pub struct VecMap<V>        "
			],
			[
				"the",
				"their"
			],
			[
				"iter",
				"iterator"
			],
			[
				"gra",
				"gradient        Let (domapi.rs) : let gradient = doc.create_element(EId::LinearGradient)\\        "
			],
			[
				"Line",
				"LinearGradient EnumVariant (element.rs) : LinearGradient,"
			],
			[
				"Node",
				"NodeType         Enum (dom.rs) : pub enum NodeType {                    "
			],
			[
				"from",
				"from_data_with_opt Function (dom.rs) : pub fn from_data_with_opt(data: &[u8], opt: &ParseOptions) -> Result<Document, Error>               "
			],
			[
				"tra",
				"traits Module (traits.rs) : /media/data/Programming/Projects/rust/svgdom/src/traits.rs   "
			],
			[
				"wri",
				"write_num"
			],
			[
				"Wri",
				"WriteOptions           Struct (write_options.rs) : pub struct WriteOptions             "
			],
			[
				"Write",
				"WriteOptions           Struct (write_options.rs) : pub struct WriteOptions                         "
			],
			[
				"Parse",
				"ParseOptions"
			],
			[
				"sub",
				"subitem"
			],
			[
				"Pars",
				"ParseError"
			],
			[
				"fr",
				"from_stream"
			],
			[
				"seg",
				"Segment"
			],
			[
				"Tra",
				"transforms"
			],
			[
				"Uni",
				"UnicodeBidi        EnumVariant (attribute.rs) : UnicodeBidi,       "
			],
			[
				"Text",
				"TextAnchor     EnumVariant (attribute.rs) : TextAnchor,    "
			],
			[
				"Len",
				"LengthUnit Enum (length.rs) : pub enum LengthUnit               "
			],
			[
				"Stroke",
				"StrokeOpacity          EnumVariant (attribute.rs) : StrokeOpacity,         "
			],
			[
				"Strok",
				"StrokeMiterlimit       EnumVariant (attribute.rs) : StrokeMiterlimit,      "
			],
			[
				"Stro",
				"StrokeLinecap          EnumVariant (attribute.rs) : StrokeLinecap,         "
			],
			[
				"Str",
				"StrokeDasharray        EnumVariant (attribute.rs) : StrokeDasharray,       "
			],
			[
				"Gly",
				"GlyphOrientationHorizontal EnumVariant (attribute.rs) : GlyphOrientationHorizontal,"
			],
			[
				"FontSize",
				"FontSizeAdjust EnumVariant (attribute.rs) : FontSizeAdjust,"
			],
			[
				"Floo",
				"FloodOpacity   EnumVariant (attribute.rs) : FloodOpacity,  "
			],
			[
				"Color",
				"ColorProfile              EnumVariant (attribute.rs) : ColorProfile,             "
			],
			[
				"from_",
				"from_name"
			],
			[
				"Eleme",
				"ElementId         Enum (element.rs) : pub enum ElementId {                                 "
			],
			[
				"Ele",
				"ElementId         Enum (element.rs) : pub enum ElementId {                                 "
			],
			[
				"Al",
				"AlignmentBaseline EnumVariant (attribute.rs) : AlignmentBaseline,"
			],
			[
				"pow",
				"powi"
			],
			[
				"pat",
				"paths                     StructField (options.rs) : Paths  "
			],
			[
				"pus",
				"push_str           Function (string.rs) : pub fn push_str(&mut self, string: &str)                                          "
			],
			[
				"prin",
				"println\tprintln!(…)"
			],
			[
				"Uns",
				"UnsupportedCSS    EnumVariant (parser.rs) : UnsupportedCSS(ErrorPos),   "
			],
			[
				"entity",
				"ENTITY"
			],
			[
				"slic",
				"slice_next_raw   Function (stream.rs) : pub fn slice_next_raw(&self, len: usize) -> &'a [u8]                "
			],
			[
				"skip",
				"skip_svg_elements"
			],
			[
				"va",
				"values                      Function (lib.rs) : pub fn values(&self) -> Values<V>                                    "
			],
			[
				"uw",
				"unwrap_or         Function (option.rs) : pub fn unwrap_or(self, def: T) -> T                                 "
			],
			[
				"w",
				"write_buf      Function (mod.rs) : fn write_buf(&self, buf: &mut Vec<u8>)                        "
			],
			[
				"Paths",
				"PathSegment    Struct (path.rs) : pub struct PathSegment {                                  "
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/lib.rs",
			"settings":
			{
				"buffer_size": 2837,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/tokenizer.rs",
			"settings":
			{
				"buffer_size": 11542,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/css.rs",
			"settings":
			{
				"buffer_size": 16065,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Cargo Test",
	"build_system_choices":
	[
		[
			[
				[
					"Cargo Build",
					""
				],
				[
					"Cargo Test",
					""
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Run"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Test"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Release"
				],
				[
					"Packages/Rust Enhanced/Cargo.sublime-build",
					"Clippy"
				],
				[
					"Packages/Rust Enhanced/Rust.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/Rust.sublime-build",
					"Run"
				]
			],
			[
				"Cargo Test",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 291.0,
		"last_filter": "men",
		"selected_items":
		[
			[
				"men",
				"View: Toggle Menu"
			],
			[
				"sett",
				"Preferences: Settings"
			],
			[
				"me",
				"View: Toggle Menu"
			],
			[
				"package",
				"Package Control: Upgrade Package"
			],
			[
				"up",
				"Package Control: Upgrade Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"git co",
				"Git: Commit history"
			],
			[
				"git di",
				"Git: Diff All Files"
			],
			[
				"m",
				"View: Toggle Menu"
			],
			[
				"",
				"About"
			],
			[
				"pc",
				"Package Control: Upgrade Package"
			],
			[
				"tm",
				"View: Toggle Menu"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"v",
				"View: Toggle Menu"
			],
			[
				"pack",
				"Package Control: Upgrade Package"
			],
			[
				"p",
				"Package Control: Upgrade Package"
			],
			[
				"vmen",
				"View: Toggle Menu"
			],
			[
				"pae",
				"Package Control: Enable Package"
			],
			[
				"rpv",
				"PackageResourceViewer: Extract Package"
			],
			[
				"prv",
				"PackageResourceViewer: Extract Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 153.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/media/data/Programming/Projects/rust/simplecss",
		"/media/data/Programming/Projects/rust/simplecss/src",
		"/media/data/Programming/Projects/rust/simplecss/tests"
	],
	"file_history":
	[
		"/media/data/Programming/Projects/rust/simplecss/README.md",
		"/media/data/Programming/Projects/rust/simplecss/src/error.rs",
		"/media/data/Programming/Projects/rust/simplecss/src/stream.rs",
		"/media/data/Programming/Projects/rust/simplecss/tests/css.rs",
		"/media/data/Programming/Projects/rust/simplecss/Cargo.toml",
		"/media/data/Programming/Projects/rust/simplecss/src/lib.rs",
		"/media/data/Stuff/home/rustc-1.12.0/src/libcollections/str.rs",
		"/media/data/Stuff/home/rustc-1.12.0/src/libcore/str/mod.rs",
		"/media/data/Programming/Projects/rust/simplecss/--> src/error.rs",
		"/media/data/Programming/Projects/rust/svgdom/tests/parser.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/lib.rs",
		"/media/data/Programming/Projects/rust/svgdom/tests/css.rs",
		"/media/data/Programming/Projects/rust/svgdom/svgdom.sublime-project",
		"/media/data/Programming/Projects/rust/svgdom/CHANGELOG.md",
		"/media/data/Programming/Projects/rust/svgdom/src/parse_options.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/error.rs",
		"/home/razr/.cargo/registry/src/github.com-1ecc6299db9ec823/svgparser-0.1.0/src/path.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/types/number.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/types/mod.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/attribute/attributes.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/dom/doc.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/attribute/attribute_value.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/writer.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/types/path.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write_options.rs",
		"/media/data/Programming/Projects/rust/svgdom/examples/custom_writer.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/dom/node.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/dom/iterators.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/types/color.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/types/transform.rs",
		"/media/data/Programming/Projects/rust/svgdom/Cargo.toml",
		"/media/data/Programming/Projects/rust/svgdom/src/types/float_cmp.rs",
		"/media/data/Programming/Projects/rust/svgdom/README.md",
		"/media/data/Programming/Projects/rust/svgdom/src/parser.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/traits.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/attribute/attribute.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/attribute/mod.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/dom.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/attribute.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/attributes.rs",
		"/media/data/Programming/Projects/rust/svgdom/tests/domapi.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/dom.rs:425:52: 425:54src/dom.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/path.rs",
		"/media/data/Programming/Projects/rust/svgdom/examples/count_curveto_segments.rs",
		"/home/razr/.cargo/registry/src/github.com-1ecc6299db9ec823/vec_map-0.6.0/src/lib.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/libcore/mem.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/libcollections/vec.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/liballoc/raw_vec.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/libcore/cell.rs",
		"/media/data/Programming/Projects/rust/svgdom/Cargo.lock",
		"/media/data/Programming/Projects/rust/svgdom/tests/generator.rs",
		"/media/data/Programming/Projects/rust/svgdom/examples/resave.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/rgbcolor.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/values_list.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/types/length.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/dom.rs:466:5: 466:8src/dom.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/libcollections/string.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/element.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/libcollections/borrow.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/mod.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/options.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/types/attributes.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/number.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/liballoc/boxed.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/libcore/ops.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/stream.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/attribute_value.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/length.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/length.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/depth.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/svg.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/error.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/style.rs",
		"/media/data/Programming/Projects/rust/svgdom/TODO.txt",
		"/media/data/Programming/Projects/rust/svgparser/src/value_id.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/color.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/attribute.rs",
		"/home/razr/.cargo/registry/src/github.com-1ecc6299db9ec823/ascii-0.7.0/src/ascii_string.rs",
		"/home/razr/.cargo/registry/src/github.com-1ecc6299db9ec823/ascii-0.7.0/src/ascii_char.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/<std macros>",
		"/media/data/Programming/Projects/rust/svgdom/src/write/predefvalue.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/lib.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/transform.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/color.rs",
		"/media/data/Stuff/home/rustc-1.10.0/src/libcore/option.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libcollections/string.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/path.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/write/transform.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libcollections/vec.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/liballoc/rc.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libcore/iter.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libcore/option.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/transform.rs",
		"/home/razr/.multirust/toolchains/stable/cargo/registry/src/github.com-88ac128001ac3a9a/ascii-0.6.0/src/lib.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/<anon>",
		"/home/razr/.multirust/toolchains/stable/src/src/libcore/cell.rs",
		"/media/data/Programming/Projects/rust/svgdom/tests/parser.rs:14:5: 14:26/media/data/Programming/Projects/rust/svgdom/tests/generator.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libstd/collections/hash/map.rs",
		"/home/razr/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/media/data/Programming/Projects/rust/svgdom/src/write/transform.rs:15:5: 15:17/media/data/Programming/Projects/rust/svgdom/src/write/transform.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/generator.rs",
		"/media/data/Programming/Projects/rust/svgparser/tests/stream.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/generator/mod.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/generator/number.rs",
		"/media/data/Programming/Projects/rust/svgdom/tests/transform.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/parser.rs:238:51: 238:52parser.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/dom.rs:16:5: 16:16dom.rs",
		"/media/data/Programming/Projects/rust/svgparser/tests/svg.rs",
		"/media/data/Programming/Projects/rust/svgparser/tests/content.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/attribute.rs:602:43: 602:69attribute.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/parser.rs:474:26: 474:29parser.rs",
		"/media/data/Programming/Projects/rust/svgparser/src/raw.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/length.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/main.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/element.rs",
		"/media/data/Programming/Projects/rust/svgdom/src/parser.rs:13:5: 13:34parser.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libcore/result.rs",
		"/media/data/Programming/Projects/rust/svgdom/spec/attributes.txt",
		"/media/data/Programming/Projects/rust/svgparser/src/paint.rs",
		"/media/data/Programming/Projects/rust/svgdom/tests/<std macros>",
		"/media/data/Programming/Projects/rust/svgdom/src/domapi.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libstd/path.rs",
		"/media/data/Programming/Projects/rust/svgdom/target/debug/build/svgdom-abdefe845244cf7c/out/attrs_phash.rs",
		"/media/data/Programming/Projects/rust/svgdom/spec/elements.txt",
		"/media/data/Programming/Projects/rust/svgdom/build.rs",
		"/home/razr/.multirust/toolchains/stable/cargo/registry/src/github.com-88ac128001ac3a9a/vec_map-0.6.0/src/lib.rs",
		"/home/razr/.multirust/toolchains/stable/src/src/libcore/convert.rs"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 96.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"InvalidAdvance",
			"# Examples",
			"svgparser",
			"curr_char",
			"char_at",
			"get_char_raw",
			"slice_next_raw",
			"gen_end_of_stream_error",
			"back",
			"InvalidIdent",
			"consume_char",
			"InvalidChar",
			"UnexpectedToken",
			"CloseBlock",
			"OpenBlock",
			"consume_char",
			"InvalidChar",
			"consume_ident",
			";;",
			"simplecss::",
			"use svgparser::",
			"advance",
			"use svgparser::Stream;",
			"parse_css",
			"pub fn",
			"\"file_regex\": \"^(.*?):([0-9]+):([0-9]+):\\\\s[0-9]+:[0-9]+\\\\s(.*)$\",",
			"parse_style_attribute",
			"styles",
			"has_children(",
			"has_children",
			"children_all",
			"_all",
			"first_element_child",
			"childre",
			"children(",
			".children()",
			"children(",
			"reference",
			"children(",
			"parse_svg_attribute",
			"entitis",
			"parse_svg_attribute",
			"post_link_data",
			">>,\n",
			"ParseOptions",
			"parse_svg_attribute",
			"parse_style_attribute",
			"parse_svg_attribute",
			"Document",
			"resolve_css",
			"Document",
			"is_element()",
			"Selector",
			"post_attrs",
			"style",
			"doc.to_string()",
			"\\\"",
			"style",
			"prin",
			":Link",
			"parse_iri_1",
			"set_li",
			"links_2",
			"abs: true,",
			"  ",
			"to_absolute_",
			"test_to_absolute",
			"test_to_relative",
			"join_arc_to_flags",
			"attributes_types_1",
			"insert(",
			"insert",
			"detach()",
			"detach",
			"remove_attribute",
			"_mut",
			"values",
			"attribute(",
			"has_attribute",
			"has_attributes",
			"has_children",
			"iter",
			"children",
			"has_pare",
			"svgparser",
			"Warning:",
			"rustfmt",
			"id.clone()",
			"a SVG",
			"color",
			"append",
			"pop(",
			"process_text",
			"descendants_iter_1",
			"libsvgdom",
			"allow",
			"from_stream",
			"missing_docs",
			"InvalidCSS",
			"id.clone()",
			".unwrap()",
			"attribute_value",
			".attribute(",
			"LinkAttributes",
			"linked_nodes",
			"WeakLink",
			"same_rc",
			"child_by",
			"is_element",
			"is_tag_name",
			"child_by_tag_name",
			"ElementId",
			"AttributeId",
			".clone()",
			"WriteToString",
			"create_element_node",
			"create_text_node",
			"create_node",
			"create_text_node",
			"create_node",
			"WriteBuffer",
			"svgparser::",
			"ParseError",
			"SvgParserError",
			"u8_to_astring",
			"AsciiString",
			"Attributes",
			"out"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"UnknownToken",
			"BlockEnd",
			"BlockStart",
			"use simplecss::;",
			"use simplecss::Stream;",
			"fn",
			"\"file_regex\": \"(?|, ([^,<\\n]*\\\\.[A-z]{2}):([0-9]+)|[ \\t]*-->[ \\t]*([^<\\n]*):([0-9]+):([0-9]+))\",",
			"children_nodes",
			".children_all()",
			"is_svg_element()",
			"doc.to_string_with_opt(&write_opt_for_tests!())",
			"'",
			"absolute: true,",
			" ",
			"",
			"test",
			"id",
			"attributes().get_value",
			".attribute_value(",
			"create_element",
			"create_node",
			"create_element_node",
			"create_node",
			"create_element_node",
			"Error",
			"ParseError",
			"u8_to_string",
			"buf",
			"Segment",
			"svg::ElementEnd::",
			"svg::Token",
			"u8_to_str",
			"some!",
			"some",
			"AttributeId::",
			"buf",
			"doc.to_string",
			"parser::Error",
			"WriteOptions",
			"dom_to_string",
			"",
			"LengthUnit",
			"test_number",
			"is_char_eq",
			"",
			"parse_css_",
			"\\\"",
			"",
			"clr!(",
			"test_parse",
			"",
			",",
			"",
			"\")",
			", \"",
			".entry(",
			"Node",
			"NodeData",
			"",
			"NodeRef",
			"Node",
			"Link",
			"WeakLink",
			"<'a>",
			"Node<'a>",
			"s",
			"pathsegment",
			"s",
			"));",
			")",
			"Color::new",
			"m.insert(",
			"self.",
			"s.curr_char()",
			"curr_char",
			"s",
			"Tokenizer",
			"svg::Tokenizer",
			"svg::Parser::",
			"Parser",
			"Error",
			"self.stream.pos()",
			"self.stream.skip_spaces",
			"self.stream.left",
			"self.stream.curr_char",
			"self.stream.char_at",
			"self.stream.jump_to",
			"self.stream.advance",
			"self.stream.len_to",
			"self.stream.substr2",
			"self.stream.starts_with",
			"StreamError",
			"Tokenizer",
			"Parser",
			"(b\"",
			"",
			",",
			"",
			"::F",
			"::C",
			"::A",
			"\", \"",
			".entry(\"path, Element::path\");\n        .entry(\"linearGradient, Element::linearGradient\");\n        .entry(\"stop, Element::stop\");\n        .entry(\"g, Element::g\");\n        .entry(\"radialGradient, Element::radialGradient\");\n        .entry(\"rect, Element::rect\");\n        .entry(\"polygon, Element::polygon\");\n        .entry(\"title, Element::title\");\n        .entry(\"filter, Element::filter\");\n        .entry(\"feGaussianBlur, Element::feGaussianBlur\");\n        .entry(\"polyline, Element::polyline\");\n        .entry(\"line, Element::line\");\n        .entry(\"svg, Element::svg\");\n        .entry(\"a, Element::a\");\n        .entry(\"altGlyph, Element::altGlyph\");\n        .entry(\"altGlyphDef, Element::altGlyphDef\");\n        .entry(\"altGlyphItem, Element::altGlyphItem\");\n        .entry(\"animate, Element::animate\");\n        .entry(\"animateColor, Element::animateColor\");\n        .entry(\"animateMotion, Element::animateMotion\");\n        .entry(\"animateTransform, Element::animateTransform\");\n        .entry(\"circle, Element::circle\");\n        .entry(\"clipPath, Element::clipPath\");\n        .entry(\"color-profile, Element::color_profile\");\n        .entry(\"cursor, Element::cursor\");\n        .entry(\"defs, Element::defs\");\n        .entry(\"desc, Element::desc\");\n        .entry(\"ellipse, Element::ellipse\");\n        .entry(\"feBlend, Element::feBlend\");\n        .entry(\"feColorMatrix, Element::feColorMatrix\");\n        .entry(\"feComponentTransfer, Element::feComponentTransfer\");\n        .entry(\"feComposite, Element::feComposite\");\n        .entry(\"feConvolveMatrix, Element::feConvolveMatrix\");\n        .entry(\"feDiffuseLighting, Element::feDiffuseLighting\");\n        .entry(\"feDisplacementMap, Element::feDisplacementMap\");\n        .entry(\"feDistantLight, Element::feDistantLight\");\n        .entry(\"feFlood, Element::feFlood\");\n        .entry(\"feImage, Element::feImage\");\n        .entry(\"feMerge, Element::feMerge\");\n        .entry(\"feMergeNode, Element::feMergeNode\");\n        .entry(\"feMorphology, Element::feMorphology\");\n        .entry(\"feOffset, Element::feOffset\");\n        .entry(\"fePointLight, Element::fePointLight\");\n        .entry(\"feSpecularLighting, Element::feSpecularLighting\");\n        .entry(\"feSpotLight, Element::feSpotLight\");\n        .entry(\"feTile, Element::feTile\");\n        .entry(\"feTurbulence, Element::feTurbulence\");\n        .entry(\"font, Element::font\");\n        .entry(\"font-face, Element::font_face\");\n        .entry(\"font-face-format, Element::font_face_format\");\n        .entry(\"font-face-name, Element::font_face_name\");\n        .entry(\"font-face-src, Element::font_face_src\");\n        .entry(\"font-face-uri, Element::font_face_uri\");\n        .entry(\"foreignObject, Element::foreignObject\");\n        .entry(\"glyph, Element::glyph\");\n        .entry(\"glyphRef, Element::glyphRef\");\n        .entry(\"hkern, Element::hkern\");\n        .entry(\"image, Element::image\");\n        .entry(\"marker, Element::marker\");\n        .entry(\"mask, Element::mask\");\n        .entry(\"metadata, Element::metadata\");\n        .entry(\"missing-glyph, Element::missing_glyph\");\n        .entry(\"mpath, Element::mpath\");\n        .entry(\"pattern, Element::pattern\");\n        .entry(\"script, Element::script\");\n        .entry(\"set, Element::set\");\n        .entry(\"style, Element::style\");\n        .entry(\"switch, Element::switch\");\n        .entry(\"symbol, Element::symbol\");\n        .entry(\"text, Element::text\");\n        .entry(\"textPath, Element::textPath\");\n        .entry(\"tref, Element::tref\");\n        .entry(\"flowRoot, Element::flowRoot\");\n        .entry(\"flowRegion, Element::flowRegion\");\n        .entry(\"flowPara, Element::flowPara\");\n        .entry(\"flowSpan, Element::flowSpan\");\n        .entry(\"tspan, Element::tspan\");\n        .entry(\"use, Element::use\");\n        .entry(\"view, Element::view\");\n        .entry(\"vkern, Element::vkern\");",
			"",
			"Element",
			"advance",
			"zero_after_point",
			"decimal_point_pos",
			"tmp_value",
			"test_parse"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/lib.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2837,
						"regions":
						{
						},
						"selection":
						[
							[
								1957,
								1957
							]
						],
						"settings":
						{
							"spell_check": false,
							"syntax": "Packages/Rust Enhanced/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 638.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/tokenizer.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11542,
						"regions":
						{
						},
						"selection":
						[
							[
								2494,
								2494
							]
						],
						"settings":
						{
							"spell_check": false,
							"syntax": "Packages/Rust Enhanced/Rust.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1320.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tests/css.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16065,
						"regions":
						{
						},
						"selection":
						[
							[
								15498,
								15498
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/Rust.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 256.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "simplecss.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 459.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
